/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AnonymousCheckInInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkIn"
      | "createMeeting"
      | "endMeeting"
      | "getActiveMeetings"
      | "getMeetingDetails"
      | "getMeetingParticipants"
      | "getUserMeetings"
      | "isParticipant"
      | "meetings"
      | "nextMeetingId"
      | "usedParticipantIds"
      | "userMeetings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CheckedIn" | "MeetingCreated" | "MeetingEnded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkIn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMeeting",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endMeeting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveMeetings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMeetingDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMeetingParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMeetings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isParticipant",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "meetings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextMeetingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usedParticipantIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userMeetings",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMeeting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endMeeting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveMeetings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeetingDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMeetingParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMeetings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "meetings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextMeetingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedParticipantIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMeetings",
    data: BytesLike
  ): Result;
}

export namespace CheckedInEvent {
  export type InputTuple = [
    meetingId: BigNumberish,
    participantId: BigNumberish,
    participantAddress: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    meetingId: bigint,
    participantId: bigint,
    participantAddress: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    meetingId: bigint;
    participantId: bigint;
    participantAddress: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MeetingCreatedEvent {
  export type InputTuple = [
    meetingId: BigNumberish,
    creator: AddressLike,
    title: string,
    maxParticipants: BigNumberish
  ];
  export type OutputTuple = [
    meetingId: bigint,
    creator: string,
    title: string,
    maxParticipants: bigint
  ];
  export interface OutputObject {
    meetingId: bigint;
    creator: string;
    title: string;
    maxParticipants: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MeetingEndedEvent {
  export type InputTuple = [
    meetingId: BigNumberish,
    duration: BigNumberish,
    participantCount: BigNumberish
  ];
  export type OutputTuple = [
    meetingId: bigint,
    duration: bigint,
    participantCount: bigint
  ];
  export interface OutputObject {
    meetingId: bigint;
    duration: bigint;
    participantCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnonymousCheckIn extends BaseContract {
  connect(runner?: ContractRunner | null): AnonymousCheckIn;
  waitForDeployment(): Promise<this>;

  interface: AnonymousCheckInInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkIn: TypedContractMethod<
    [_meetingId: BigNumberish, _participantId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createMeeting: TypedContractMethod<
    [_title: string, _maxParticipants: BigNumberish],
    [void],
    "nonpayable"
  >;

  endMeeting: TypedContractMethod<
    [_meetingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveMeetings: TypedContractMethod<[], [bigint[]], "view">;

  getMeetingDetails: TypedContractMethod<
    [_meetingId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        creator: string;
        title: string;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        participantCount: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  getMeetingParticipants: TypedContractMethod<
    [_meetingId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getUserMeetings: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  isParticipant: TypedContractMethod<
    [_meetingId: BigNumberish, _participantId: BigNumberish],
    [boolean],
    "view"
  >;

  meetings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        creator: string;
        title: string;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        participantCount: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  nextMeetingId: TypedContractMethod<[], [bigint], "view">;

  usedParticipantIds: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  userMeetings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<
    [_meetingId: BigNumberish, _participantId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMeeting"
  ): TypedContractMethod<
    [_title: string, _maxParticipants: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endMeeting"
  ): TypedContractMethod<[_meetingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveMeetings"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMeetingDetails"
  ): TypedContractMethod<
    [_meetingId: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        creator: string;
        title: string;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        participantCount: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMeetingParticipants"
  ): TypedContractMethod<[_meetingId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserMeetings"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isParticipant"
  ): TypedContractMethod<
    [_meetingId: BigNumberish, _participantId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "meetings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        creator: string;
        title: string;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        participantCount: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextMeetingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usedParticipantIds"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "userMeetings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "CheckedIn"
  ): TypedContractEvent<
    CheckedInEvent.InputTuple,
    CheckedInEvent.OutputTuple,
    CheckedInEvent.OutputObject
  >;
  getEvent(
    key: "MeetingCreated"
  ): TypedContractEvent<
    MeetingCreatedEvent.InputTuple,
    MeetingCreatedEvent.OutputTuple,
    MeetingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MeetingEnded"
  ): TypedContractEvent<
    MeetingEndedEvent.InputTuple,
    MeetingEndedEvent.OutputTuple,
    MeetingEndedEvent.OutputObject
  >;

  filters: {
    "CheckedIn(uint256,uint256,address,uint256)": TypedContractEvent<
      CheckedInEvent.InputTuple,
      CheckedInEvent.OutputTuple,
      CheckedInEvent.OutputObject
    >;
    CheckedIn: TypedContractEvent<
      CheckedInEvent.InputTuple,
      CheckedInEvent.OutputTuple,
      CheckedInEvent.OutputObject
    >;

    "MeetingCreated(uint256,address,string,uint256)": TypedContractEvent<
      MeetingCreatedEvent.InputTuple,
      MeetingCreatedEvent.OutputTuple,
      MeetingCreatedEvent.OutputObject
    >;
    MeetingCreated: TypedContractEvent<
      MeetingCreatedEvent.InputTuple,
      MeetingCreatedEvent.OutputTuple,
      MeetingCreatedEvent.OutputObject
    >;

    "MeetingEnded(uint256,uint256,uint256)": TypedContractEvent<
      MeetingEndedEvent.InputTuple,
      MeetingEndedEvent.OutputTuple,
      MeetingEndedEvent.OutputObject
    >;
    MeetingEnded: TypedContractEvent<
      MeetingEndedEvent.InputTuple,
      MeetingEndedEvent.OutputTuple,
      MeetingEndedEvent.OutputObject
    >;
  };
}
