/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ZamaFheCheckInInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "callbackCheckInStatus"
      | "checkIn"
      | "createMeeting"
      | "decryptMeetingStats"
      | "endMeeting"
      | "maximumMeetingDuration"
      | "meetings"
      | "meetingsCreated"
      | "minimumCheckInFee"
      | "nextMeetingId"
      | "participantStatus"
      | "protocolId"
      | "requestCheckInStatus"
      | "setMaximumDuration"
      | "setMinimumFee"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CheckInStatusDecrypted"
      | "CheckedIn"
      | "DecryptionFulfilled"
      | "MeetingCreated"
      | "MeetingEnded"
      | "MeetingStatsDecrypted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callbackCheckInStatus",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMeeting",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptMeetingStats",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endMeeting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumMeetingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "meetings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "meetingsCreated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCheckInFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMeetingId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participantStatus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCheckInStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callbackCheckInStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMeeting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptMeetingStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endMeeting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumMeetingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "meetings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "meetingsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumCheckInFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMeetingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participantStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCheckInStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace CheckInStatusDecryptedEvent {
  export type InputTuple = [
    meetingId: BigNumberish,
    participant: AddressLike,
    isCheckedIn: boolean
  ];
  export type OutputTuple = [
    meetingId: bigint,
    participant: string,
    isCheckedIn: boolean
  ];
  export interface OutputObject {
    meetingId: bigint;
    participant: string;
    isCheckedIn: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckedInEvent {
  export type InputTuple = [
    meetingId: BigNumberish,
    participantAddress: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    meetingId: bigint,
    participantAddress: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    meetingId: bigint;
    participantAddress: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MeetingCreatedEvent {
  export type InputTuple = [
    meetingId: BigNumberish,
    creator: AddressLike,
    title: string,
    maxParticipants: BigNumberish,
    checkInFee: BigNumberish
  ];
  export type OutputTuple = [
    meetingId: bigint,
    creator: string,
    title: string,
    maxParticipants: bigint,
    checkInFee: bigint
  ];
  export interface OutputObject {
    meetingId: bigint;
    creator: string;
    title: string;
    maxParticipants: bigint;
    checkInFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MeetingEndedEvent {
  export type InputTuple = [
    meetingId: BigNumberish,
    duration: BigNumberish,
    participantCount: BigNumberish,
    totalFees: BigNumberish
  ];
  export type OutputTuple = [
    meetingId: bigint,
    duration: bigint,
    participantCount: bigint,
    totalFees: bigint
  ];
  export interface OutputObject {
    meetingId: bigint;
    duration: bigint;
    participantCount: bigint;
    totalFees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MeetingStatsDecryptedEvent {
  export type InputTuple = [
    meetingId: BigNumberish,
    participantCount: BigNumberish,
    totalFees: BigNumberish
  ];
  export type OutputTuple = [
    meetingId: bigint,
    participantCount: bigint,
    totalFees: bigint
  ];
  export interface OutputObject {
    meetingId: bigint;
    participantCount: bigint;
    totalFees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZamaFheCheckIn extends BaseContract {
  connect(runner?: ContractRunner | null): ZamaFheCheckIn;
  waitForDeployment(): Promise<this>;

  interface: ZamaFheCheckInInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  callbackCheckInStatus: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  checkIn: TypedContractMethod<[_meetingId: BigNumberish], [void], "payable">;

  createMeeting: TypedContractMethod<
    [
      _title: string,
      _maxParticipants: BigNumberish,
      _checkInFee: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "payable"
  >;

  decryptMeetingStats: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  endMeeting: TypedContractMethod<
    [_meetingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  maximumMeetingDuration: TypedContractMethod<[], [bigint], "view">;

  meetings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ] & {
        creator: string;
        title: string;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        status: bigint;
        checkInFee: bigint;
        encryptedParticipantCount: string;
        encryptedTotalFees: string;
        decryptedParticipantCount: bigint;
        decryptedTotalFees: bigint;
      }
    ],
    "view"
  >;

  meetingsCreated: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  minimumCheckInFee: TypedContractMethod<[], [bigint], "view">;

  nextMeetingId: TypedContractMethod<[], [bigint], "view">;

  participantStatus: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestCheckInStatus: TypedContractMethod<
    [_meetingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaximumDuration: TypedContractMethod<
    [_newDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "callbackCheckInStatus"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<[_meetingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createMeeting"
  ): TypedContractMethod<
    [
      _title: string,
      _maxParticipants: BigNumberish,
      _checkInFee: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "decryptMeetingStats"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endMeeting"
  ): TypedContractMethod<[_meetingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maximumMeetingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "meetings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint
      ] & {
        creator: string;
        title: string;
        startTime: bigint;
        endTime: bigint;
        maxParticipants: bigint;
        status: bigint;
        checkInFee: bigint;
        encryptedParticipantCount: string;
        encryptedTotalFees: string;
        decryptedParticipantCount: bigint;
        decryptedTotalFees: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "meetingsCreated"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumCheckInFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextMeetingId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "participantStatus"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestCheckInStatus"
  ): TypedContractMethod<[_meetingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaximumDuration"
  ): TypedContractMethod<[_newDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimumFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CheckInStatusDecrypted"
  ): TypedContractEvent<
    CheckInStatusDecryptedEvent.InputTuple,
    CheckInStatusDecryptedEvent.OutputTuple,
    CheckInStatusDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "CheckedIn"
  ): TypedContractEvent<
    CheckedInEvent.InputTuple,
    CheckedInEvent.OutputTuple,
    CheckedInEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "MeetingCreated"
  ): TypedContractEvent<
    MeetingCreatedEvent.InputTuple,
    MeetingCreatedEvent.OutputTuple,
    MeetingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MeetingEnded"
  ): TypedContractEvent<
    MeetingEndedEvent.InputTuple,
    MeetingEndedEvent.OutputTuple,
    MeetingEndedEvent.OutputObject
  >;
  getEvent(
    key: "MeetingStatsDecrypted"
  ): TypedContractEvent<
    MeetingStatsDecryptedEvent.InputTuple,
    MeetingStatsDecryptedEvent.OutputTuple,
    MeetingStatsDecryptedEvent.OutputObject
  >;

  filters: {
    "CheckInStatusDecrypted(uint256,address,bool)": TypedContractEvent<
      CheckInStatusDecryptedEvent.InputTuple,
      CheckInStatusDecryptedEvent.OutputTuple,
      CheckInStatusDecryptedEvent.OutputObject
    >;
    CheckInStatusDecrypted: TypedContractEvent<
      CheckInStatusDecryptedEvent.InputTuple,
      CheckInStatusDecryptedEvent.OutputTuple,
      CheckInStatusDecryptedEvent.OutputObject
    >;

    "CheckedIn(uint256,address,uint256)": TypedContractEvent<
      CheckedInEvent.InputTuple,
      CheckedInEvent.OutputTuple,
      CheckedInEvent.OutputObject
    >;
    CheckedIn: TypedContractEvent<
      CheckedInEvent.InputTuple,
      CheckedInEvent.OutputTuple,
      CheckedInEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "MeetingCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      MeetingCreatedEvent.InputTuple,
      MeetingCreatedEvent.OutputTuple,
      MeetingCreatedEvent.OutputObject
    >;
    MeetingCreated: TypedContractEvent<
      MeetingCreatedEvent.InputTuple,
      MeetingCreatedEvent.OutputTuple,
      MeetingCreatedEvent.OutputObject
    >;

    "MeetingEnded(uint256,uint256,uint32,uint32)": TypedContractEvent<
      MeetingEndedEvent.InputTuple,
      MeetingEndedEvent.OutputTuple,
      MeetingEndedEvent.OutputObject
    >;
    MeetingEnded: TypedContractEvent<
      MeetingEndedEvent.InputTuple,
      MeetingEndedEvent.OutputTuple,
      MeetingEndedEvent.OutputObject
    >;

    "MeetingStatsDecrypted(uint256,uint32,uint32)": TypedContractEvent<
      MeetingStatsDecryptedEvent.InputTuple,
      MeetingStatsDecryptedEvent.OutputTuple,
      MeetingStatsDecryptedEvent.OutputObject
    >;
    MeetingStatsDecrypted: TypedContractEvent<
      MeetingStatsDecryptedEvent.InputTuple,
      MeetingStatsDecryptedEvent.OutputTuple,
      MeetingStatsDecryptedEvent.OutputObject
    >;
  };
}
